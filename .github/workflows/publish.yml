name: Publish to NPM

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty for current package.json version)'
        required: false
        type: string
      tag:
        description: 'NPM dist-tag (latest, beta, alpha, etc.)'
        required: false
        default: 'latest'
        type: choice
        options:
          - latest
          - beta
          - alpha
          - next
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  canary:
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false && github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write # Required for NPM provenance
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
    
      run: npm ci

    - name: Run tests
      run: npm run test:ci

    - name: Build project
      run: npm run build

    - name: Compute canary version
      id: compute
      run: |
        BASE_VERSION=$(node -p "require('./package.json').version")
        SHORT_SHA=${GITHUB_SHA::7}
        CANARY_VERSION="${BASE_VERSION}-canary.${SHORT_SHA}"
        echo "CANARY_VERSION=${CANARY_VERSION}" >> $GITHUB_ENV
        echo "version=${CANARY_VERSION}" >> $GITHUB_OUTPUT

    - name: Update package.json to canary version
      run: npm version "$CANARY_VERSION" --no-git-tag-version

    - name: Publish canary to NPM
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm publish --tag canary --provenance --access public

    - name: Comment canary version on PR
      uses: actions/github-script@v7
      with:
        script: |
          const version = process.env.CANARY_VERSION;
          const shortSha = process.env.GITHUB_SHA.substring(0,7);
          const { owner, repo } = context.repo;
          const issue_number = context.payload.pull_request.number;
          const body = `<!-- clicksuite-canary -->\n` +
            `Published canary for ${context.payload.pull_request.head.ref} @ ${shortSha}:\n\n` +
            `- Version: \`${version}\`\n` +
            `- Install: \`npm install clicksuite@${version}\`\n` +
            `- Dist-tag: \`canary\``;
          const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number, per_page: 100 });
          const existing = comments.find(c => (c.user?.type === 'Bot' || c.user?.login === 'github-actions[bot]') && c.body?.includes('<!-- clicksuite-canary -->'));
          if (existing) {
            await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
          } else {
            await github.rest.issues.createComment({ owner, repo, issue_number, body });
          }

  publish:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write # Required for NPM provenance

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test:ci

    - name: Build project
      run: npm run build

    - name: Update version (if specified)
      if: github.event.inputs.version
      run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

    - name: Publish to NPM
      run: |
        if [ "${{ github.event.inputs.tag }}" != "" ]; then
          npm publish --tag ${{ github.event.inputs.tag }} --provenance --access public
        else
          npm publish --provenance --access public
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub release (if manual dispatch)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.version
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        body: |
          Changes in this Release
          - Published to NPM with tag: ${{ github.event.inputs.tag || 'latest' }}
        draft: false
        prerelease: ${{ github.event.inputs.tag != 'latest' }}

  notify:
    needs: publish
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.publish.result == 'success'
      run: |
        echo "✅ Successfully published to NPM!"
        echo "Package: clicksuite"
        echo "Tag: ${{ github.event.inputs.tag || 'latest' }}"
        
    - name: Notify failure
      if: needs.publish.result == 'failure'
      run: |
        echo "❌ Failed to publish to NPM"
        exit 1